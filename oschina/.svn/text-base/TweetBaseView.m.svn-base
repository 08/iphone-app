//
//  TweetBaseView.m
//  oschina
//
//  Created by wangjun on 12-3-6.
//  Copyright (c) 2012年 __MyCompanyName__. All rights reserved.
//

#import "TweetBaseView.h"

@implementation TweetBaseView
@synthesize viewMain;
@synthesize scrollView;
@synthesize pageControl;
@synthesize viewControllers;
@synthesize allTwitter;
@synthesize myTwitter;
@synthesize pubTweet;

static NSUInteger kNumberOfPages = 2;
@interface TweetBaseView(PrivateMethods)

- (void)loadScrollViewWithPage:(int)page;
- (void)scrollViewDidScroll:(UIScrollView *)sender;

@end

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
        self.title = @"动弹";
        self.tabBarItem.image = [UIImage imageNamed:@"second"];
    }
    return self;
}

- (void)didReceiveMemoryWarning
{
    // Releases the view if it doesn't have a superview.
    [super didReceiveMemoryWarning];
    
    // Release any cached data, images, etc that aren't in use.
}

#pragma mark - View lifecycle

- (void)viewDidLoad
{
    [super viewDidLoad];
    // Do any additional setup after loading the view from its nib.
    self.viewControllers = [[NSMutableArray alloc] initWithCapacity:2];
    [self.viewControllers addObject:[NSNull null]];
    [self.viewControllers addObject:[NSNull null]];
//    [self.viewControllers addObject:[NSNull null]];
    
    // a page is the width of the scroll view
    scrollView.pagingEnabled = YES;
    scrollView.contentSize = CGSizeMake(scrollView.frame.size.width * kNumberOfPages, 200);
    scrollView.showsHorizontalScrollIndicator = NO;
    scrollView.showsVerticalScrollIndicator = NO;
    scrollView.scrollsToTop = NO;
    scrollView.delegate = self;
	
    pageControl.numberOfPages = kNumberOfPages;
    pageControl.currentPage = 0;
    [self loadScrollViewWithPage:0];
    [self loadScrollViewWithPage:1];
//    [self loadScrollViewWithPage:2];
    
    self.pubTweet = [[PubTweet alloc] init];
    self.pubTweet.view.hidden = YES;
//    [self.view addSubview:self.pubTweet.view];
    [self.viewMain addSubview:self.pubTweet.view];
}

- (void)viewDidUnload
{
    [self setViewMain:nil];
    [self setViewControllers:nil];
    [self setPageControl:nil];
    [self setScrollView:nil];
    [super viewDidUnload];
}
- (void)loadScrollViewWithPage:(int)page {
    if (page < 0) return;
    if (page >= kNumberOfPages) return;
    
    UIViewController *controller;
    switch(page)
    {
        case 0:
        {
            controller = (TwitterView *)[viewControllers objectAtIndex:0];
            if((NSNull *)controller == [NSNull null]){
                controller = [[TwitterView alloc] init];
                self.allTwitter = (TwitterView *)controller;
                [viewControllers replaceObjectAtIndex:page withObject:controller];
            }
        }
            break;
        case 1:
        {
            controller = (TwitterView *)[viewControllers objectAtIndex:1];
            if((NSNull *)controller == [NSNull null]){
                controller = [[TwitterView alloc] init];
                self.myTwitter = (TwitterView *)controller;
                [viewControllers replaceObjectAtIndex:page withObject:controller];
            }
        }
            break;
        case 2:
        {
            controller = (PubTweet *)[viewControllers objectAtIndex:2];
            if((NSNull *)controller == [NSNull null]){
                controller = [[PubTweet alloc] init];
                self.pubTweet = (PubTweet *)controller;
                [viewControllers replaceObjectAtIndex:page withObject:controller];
            }
        }
            break;
    }
    //继续
    if(nil == controller.view.superview)
    {
        CGRect frame = scrollView.frame;
        frame.origin.x = frame.size.width*page;
        //关键代码
        frame.origin.y = 0;
        controller.view.frame = frame;
        [scrollView addSubview:controller.view];
    }
}

- (void)scrollViewDidScroll:(UIScrollView *)sender {
    // We don't want a "feedback loop" between the UIPageControl and the scroll delegate in
    // which a scroll event generated from the user hitting the page control triggers updates from
    // the delegate method. We use a boolean to disable the delegate logic when the page control is used.
    if (pageControlUsed) {
        // do nothing - the scroll was initiated from the page control, not the user dragging
        return;
    }
    // Switch the indicator when more than 50% of the previous/next page is visible
    CGFloat pageWidth = scrollView.frame.size.width;
    int page = floor((scrollView.contentOffset.x - pageWidth / 2) / pageWidth) + 1;
    pageControl.currentPage = page;
	
    // load the visible page and the page on either side of it (to avoid flashes when the user starts scrolling)
    [self loadScrollViewWithPage:page - 1];
    [self loadScrollViewWithPage:page];
    [self loadScrollViewWithPage:page + 1];
	
    // A possible optimization would be to unload the views+controllers which are no longer visible
}

// At the end of scroll animation, reset the boolean used when scrolls originate from the UIPageControl
- (void)scrollViewDidEndDecelerating:(UIScrollView *)scrollView {
    pageControlUsed = NO;
}

- (IBAction)changePage:(id)sender {
    int page = pageControl.currentPage;
    // load the visible page and the page on either side of it (to avoid flashes when the user starts scrolling)
    [self loadScrollViewWithPage:page - 1];
    [self loadScrollViewWithPage:page];
    [self loadScrollViewWithPage:page + 1];
    // update the scroll view to the appropriate page
    CGRect frame = scrollView.frame;
    frame.origin.x = frame.size.width * page;
    frame.origin.y = 0;
    [scrollView scrollRectToVisible:frame animated:YES];
    // Set the boolean used when scrolls originate from the UIPageControl. See scrollViewDidScroll: above.
    pageControlUsed = YES;
}

- (IBAction)selector_ViewTweet:(id)sender {
    if(self.scrollView && self.pageControl){
        self.scrollView.hidden = self.pageControl.hidden = NO;
    }
    if(self.pubTweet){
        self.pubTweet.view.hidden = YES;
    }
}
- (IBAction)selector_PubTweet:(id)sender {
    if(self.scrollView && self.pageControl){
        self.scrollView.hidden = self.pageControl.hidden = YES;
    }
    if(self.pubTweet){
        self.pubTweet.view.hidden = NO;
    }
}

@end
